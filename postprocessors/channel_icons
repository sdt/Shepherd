#!/usr/bin/env perl

# Augment XMLTV channels with channel icons.

use strict;
use warnings;
my $progname = "channel_icons";
my $version = "0.01";

use XMLTV;
use Getopt::Long;
use IO::File;

my $opt = {
	output_file 	=>	'output.xmltv',
	channels_file 	=>	'channels.conf',
	debug		=> 	0,
};

# parse command line
GetOptions(
	'output=s'		=> \$opt->{output_file},
	'channels_file=s'       => \$opt->{channels_file},

	'help'			=> \$opt->{help},
	'verbose'		=> \$opt->{help},
	'version'		=> \$opt->{version},
	'ready'			=> \$opt->{ready},
	'desc'			=> \$opt->{desc},
	'v'			=> \$opt->{version});

printf "%s v%s\n",$progname,$version;

if ($opt->{version} || $opt->{desc} || $opt->{help} || $opt->{ready} ||
    $opt->{output_file} eq "") {
    	print "Insert channel icons into the XMLTV data\n"
	    if $opt->{desc};

	printf "$progname is ready for operation.\n" if ($opt->{ready});

	printf "No --output file specified.\n" if ($opt->{output_file} eq "");

	if ($opt->{help} || $opt->{output_file} eq "") {
		print<<EOF

usage: $0 [options] {FILE(s)}

Supported options include:
  --output={file}               Send final XMLTV output to {file} (default: $opt->{output_file})
  --channels_file={file}        Use channel config in {file}      (default: $opt->{channels_file})
EOF
;
	}
	exit(0);
}

die "no channel file specified\n", if (!$opt->{channels_file});

# read channels file
die "WARNING: channels file $opt->{channels_file} could not be read\n"
	unless -r $opt->{channels_file};

do $opt->{channels_file};
die "Error in $opt->{channels_file}: $@" if $@;

my $fh = new IO::File('>'.$opt->{output_file}) || die "can't open $opt->{output_file} for writing: $!";

my %writer_args = (
	encoding => 'ISO-8859-1',
	OUTPUT   => $fh,
);

my $writer = new XMLTV::Writer(%writer_args);
$writer->start( {
	'source-info-name' => "$progname $version",
	'generator-info-name' => "$progname $version"} );

for my $file (@ARGV) {
	printf " - parsing: %s\n", ($file eq "-" ? "(from-stdin, hit control-D to finish)" : $file);
	XMLTV::parsefiles_callback(undef, undef, \&channel_cb,\&programme_cb, $file);
}

$writer->end();

printf "Finished parsing, output in $opt->{output_file}\n";

exit(0);

##############################################################################

sub channel_cb
{
	my $channel = shift;
	$channel->{icon} = [ { src => 'http://img43.imageshack.us/img43/735/abc86ce2a644c39d7ffd529.png' } ];
	$writer->write_channel($channel);
}

##############################################################################

sub programme_cb
{
	my $prog = shift;
	$writer->write_programme($prog);
}

##############################################################################


# vim: sw=8:ts=8:noet
